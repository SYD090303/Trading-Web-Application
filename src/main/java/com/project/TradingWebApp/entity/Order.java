package com.project.TradingWebApp.entity;

import com.project.TradingWebApp.domain.OrderStatus;
import com.project.TradingWebApp.domain.OrderType;
import jakarta.persistence.*;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Data
@Table(name="orders")
/**
 * Represents an Order entity in the trading application.
 * This entity stores information about a trading order placed by a user, including details like order type, price, status, and related items.
 * It is designed to track the lifecycle and details of each order within the trading system.
 */
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    /**
     * The unique identifier for the order.
     * This is a Long type and is automatically generated by the database as the primary key.
     * `GenerationType.IDENTITY` indicates that the database is responsible for generating unique, sequential IDs.
     */
    private Long id;

    @ManyToOne(fetch = FetchType.EAGER)
    /**
     * The UserEntity who placed this order.
     * Establishes a many-to-one relationship with the UserEntity, meaning multiple orders can be placed by the same user.
     * `FetchType.EAGER` indicates that when an Order is fetched, the associated UserEntity is also fetched immediately.
     */
    private UserEntity user;

    @Column(nullable = false)
    /**
     * The type of order, such as BUY or SELL.
     * Uses the `OrderType` enum to define whether the order is to buy or sell an asset.
     * `nullable = false` ensures that every order must have a specified order type.
     */
    private OrderType orderType;

    @Column(nullable = false)
    /**
     * The price at which the order is placed.
     * Stored as a BigDecimal to handle decimal values and currency accurately, especially important in financial applications.
     * `nullable = false` ensures that every order must have a price specified.
     */
    private BigDecimal price;

    /**
     * The timestamp indicating when the order was placed.
     * Automatically set to the current date and time when an Order entity is created using `LocalDateTime.now()`.
     * Provides a record of the order's creation time.
     */
    private LocalDateTime timestamp = LocalDateTime.now();

    @Column(nullable = false)
    /**
     * The current status of the order.
     * Uses the `OrderStatus` enum to track the order's progression (e.g., PENDING, FILLED, CANCELLED).
     * `nullable = false` ensures that every order must have a status.
     */
    private OrderStatus orderStatus;

    @OneToOne(mappedBy = "order", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    /**
     * The OrderItem associated with this order.
     * Establishes a one-to-one relationship with the OrderItem entity. `mappedBy = "order"` indicates this side is the inverse of the relationship, and the 'order' field in OrderItem is the owner.
     * `cascade = CascadeType.ALL` means that all operations (persist, remove, merge, etc.) on the Order entity will cascade to the associated OrderItem entity.
     * `FetchType.EAGER` means that when an Order is fetched, the associated OrderItem is also fetched immediately.
     * This relationship is used to store details specific to the item being ordered (like quantity and asset).
     */
    private OrderItem orderItem;
}